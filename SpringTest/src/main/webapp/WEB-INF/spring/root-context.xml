<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 웹과 관련된 설정을 제외한 모든 설정을 처리하는 파일(전체 프로젝트에 영향을 준다) -->	
	
	<!-- 디비 연결 객체 생성 -->
	<bean id="dataSource"
		  class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		  	
		<!-- 드라이버 -->
		<property name="driverClassName">
			<value>com.mysql.jdbc.Driver</value>
		</property>
		<!-- 주소 -->
		<property name="url" value="jdbc:mysql://localhost:3306/springdb?userSSL=false"></property>
		<!-- 아이디 -->
		<property name="username" value="root"></property>
		<!-- 비밀번호 -->
		<property name="password" value="1234"></property>	
	
	</bean>
	
	<!-- MyBatis 연결 객체 - SqlSessionFactory 객체 -->
	<!-- => Connection 객체 생성, DB연결 처리, SQL 실행 -->
	<!-- 
		SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();
	 -->
	<bean id="sqlSessionFactory"
		  class="org.mybatis.spring.SqlSessionFactoryBean">
	
		<!-- 위에 만들어놓은 DB 연결 객체 정보를 주입 -->
		<property name="dataSource" ref="dataSource" />
		
		<!-- src/main/resources/mybatis-config.xml -->
		<!-- mybatis 설정값을 추가 -->
		<property name="configLocation"
				  value="classpath:/mybatis-config.xml">
				  <!-- main/resources에 접근하는 경로 -->
		</property>
		
		<!-- mapper의 정보를 연결(SQL 구문) -->
		<!-- mappers폴더 안에서 ~~~Mapper.xml로 끝나는 파일을 만들어서 추가해라 -->
		<property name="mapperLocations"
				  value="classpath:mappers/**/*Mapper.xml"
		></property>
		
	</bean>
	
	<!-- 		 
		 SqlSession 인터페이스를 구현한 객체
		 => SqlSessionTemplate 객체 생성
		 (DB 연결, 자원 해제 처리 객체) mybatis-spring 라이브러리 안에 포함
	 -->
	 <bean id="sqlSession" 
	 	   class="org.mybatis.spring.SqlSessionTemplate"
	 	   destroy-method="clearCache"
	 >
	 <!-- destroy-method="clearCache": 자원해제 메서드  -->
	 
	 	<!-- 생성자 -->
	 	<constructor-arg name="sqlSessionFactory"
	 					 ref="sqlSessionFactory"
	 	></constructor-arg>
	 
	 </bean>
	 <!-- 소스코드 아래쪽 beans탭에서 bean graph 확인 -->
	
	
	
	<!-- 
		 root-context.xml파일과 com.itwillbs.persistence 패키지를 연결하겠다 
		 root-context.xml은 스프링 전반적인 설정 제어 
		 -> 다른 곳에서 root-context.xml를 찾아오면 com.itwillbs.persistence로 이동하게 함
		 
		 dataSource 
		 -> sqlSessionFactory의 속성으로 주입
		 -> sqlSessionFactory를 상속하는 SqlSessionTemplate 타입의 sqlSession이라는 이름의 객체 생성(생성자)
		 
		 persistence 계층의 Implement(구현)객체에서  (ex : MemberDAOImpl.java)
		 @Inject 어노테이션이 붙은 변수의 이름과 일치하는 bean객체를 root-context.xml로부터 찾아서 의존 주입
		 
		 sqlSession 객체는 sqlSessionFactory를 상속하므로, mapper로부터 정보를 찾을 때 
		 sqlSessionFactory의 속성으로 추가된 mapper.xml 정보로부터 mapper의 데이터를 가져온다.		 
		 
	-->
	<context:component-scan base-package="com.itwillbs.persistence" />
	
</beans>
