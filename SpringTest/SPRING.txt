
스프링 웹 프로젝트

1) Spring Boot 
    별도의 설정이 필요없음.
  WAS가 필요없음.
    로딩시간이 짧아서 테스트하기 편함.
  / 
   기존의 설정과 다른방식(독립적 방식)
   jsp 페이지 설정이 조금 복잡함. 


2) Spring Legacy Project => STS4에서는 기본 제공X(마켓플레이스에서 sts 검색추가)
  가장 일반적으로 사용되는 형태
  다양한 정보 제공
  이전의 프로젝트 구조를 이해하기 쉬움.
  모든 버전의 스프링을 사용할수 있음.
  /
  초반 설정이 매우 어려움(반복숙달)
  WAS를 사용할경우 많은 리소스가 필요함.
  최신 트렌드에는 조금 느릴수 있음.


* 빌드도구 Maven : 필요한 라이브러리를 쉽게 추가할수있게 함

  C:\Users\ITWILL\.m2\repository
  => 로컬에 저장됨 
   1) 프로젝트 우클릭 > MAVEN > update project  사용 재시작
   2) 필요에따라서 폴더 안에 파일을 직접 삭제후 재시작(STS 종료)

* 프로젝트 처음 만들때 사용한 패키지명이 프로젝트 실행시 주소로 표기
   패키지 : com.itwillbs.test
   시작주소 : http://localhost:8080/test/~
   
   
   * 프레임워크 : 뼈대, 틀처럼 프로젝트를 구성하는 코드의 묶음
   => 일반적인 프로젝트 진행보다 평균적인 결과를 제공하는 형태를 만들기위해서 
   => 경량 프레임워크 (서버 중심 개발-> 클라이언트 중심 개발)
   => 프로젝트 전체 설계가 쉽다.
   => 다양한 프레임워크 지원, 개발도구 지원
   
   * POJO기반의 구성(Plain Old Java Object) 
   => 자바코드 그대로 스프링에 적용가능(관계 구성시 별도의 API를 사용하지 않아도된다)
   
   * 제어의 역행(IoC-Inversion Of Control) 
   -> 메서드,객체 호출을 개발자가 직접하는게 아니라 외부(스프링)에서 결정 
   => 대부분의 프레임워크에서 사용 => 끼워넣기식 개발
    
   * 의존성 주입(DI-Dependency Injection)
   => 제어의 역행이 발생할때 스프링 내부에 있는 객체(Bean)가 전달되는 형태를 관리
   => A는 B를 필요로 한다.( A-B는 의존 관계에 있다 )
   
   * set메서드 / 생성자 사용 => java 프로젝트 참고
   
   * AOP 지원(Aspect Oriented Programming)
   => 보안처리,로그출력,트랜잭션등과 같은 작업은 반드시 필요하지만 내가 구현하기엔
      부담되기 때문에 스프링에서 처리함(횡단 관심사-cross concern)
   => 횡단 관심사를 처리할수있도록 모듈로 분리해서 제공해주는 프로그래밍 방법   
   
   














